//Program Name: Problem 9: Matrix Function and Operations Program
//Brief Description: This program will ask the user for a matrix text fiel and options choice for adding or multiplying matrices, finding the sum diagonal, swapping rows and columsn,a dn updating the matrix at row by cloumn locaiton.
//Input: The input is a matrix text fileeither 1 nxn matrix or 2 nxn matrix with matrix sizes at the top to indicate the size of the matrix or matrices. A choice input will be put int to ask the user what Matrix funcion or operation needs to be executed based on their liking.
//Ouput: The ouput will welcome the user and give a goodbye message to the user. Print a menu to the user. Print result matrices based on the choice, that they ask. The hcoice ouptu will dicatte what Matrix function or operation needs to executed.
//All collaborators: None
//Other Sources:Github Copilot and ChatGPT 
//Author: Ryan Antony Pereira
//Creation Date: 4/7/2025
//Last Modified Date: 4/7/2025

//ChatGPT helped with debuggin, pointing out errors, helping me correct my code.

//Includes the iostream library file to include standard input and ouput for cin and cout
#include <iostream>
//Includes the C++ fstream libary for file input and output, open and close functionality
#include <fstream>
//Includes the C++ string library for string manipulation and implmentation
#include <string>
//Includes the C++ sstream library for file string parsing functionality
#include <sstream>
//Includes the C++ vector library for array manipulation and implementation
#include <vector>
//Using standard namespace to avoid using std:: prefix
using namespace std;


template <typename T> class Matrix{
    private:
        int number_of_rows;
        int number_of_columns;
        vector<vector<T>> grid;
    public:
    Matrix(int rows, int columns);
    }
    int get_number_of_rows();
    int get_number_of_columns();

    void store_numbers();
    void create_matrix();
    void create_matrixes();
    void print_grid();
    void add_matrices();
    void multiply_matrices();
    void sum_diagonal();
    void swap_rows();
    void swap_columns();
    void updated_matrix();
};
template <typename T> Matrix<T>::get_number_of_rows(){
    return number_of_rows;
}

template <typename T> Matrix<T>::get_number_of_columns(){
    return number_of_columns;
}
template <typename T> Matrix<T>::Matrix(int rows, int columns){
    number_of_rows = rows;
    number_of_columns = columns;
    grid.resize(rows, vector<T>(columns));
}

//Function,returns nothing, prints the menu for user to see what choice they want to make on what matrix operation they want to make
void print_menu() {
	//Prints ouput to terminal to prompt the user that choice 1 is for them to input a 2 nxn matrix text file to read and stores the matrixes separate and print them to the termianl
	cout<<"1: Read values from a file into the matrix" << "\n";
	//Prints ouput to terminal to prompt the user that choice 2 is for them to input a 2 nxn matrix text file to read and stores the matrixes, and perform an addition operation, and print the result to terminal
	cout<<"2: Add two matrices and display the result" << "\n";
	//Prints output to terminal to prompt the user that choice 3 is for them to input a 2 nxn matrix text file to read and stores the matrixes seperate, and perform a multiplication operation, and print the result to terminal.
	cout<<"3: Multiply two matrices and display the result" << "\n";
	//Prints output to termianl to prompt the user that chouce 4 is for them to input a 1 nxn matrix text file to read and stores the matrix, and print out the sum of the main and secondary diagonals of that matrix
	cout<<"4: Get the sum of matrix diagonal elements" << "\n";
	//Prints output to terminal to prompt the user that choice 5 is for them to input a 1 nxn matrix text file to read and stores the matrix, and swap the rows based on user input, and print out the result matrix of the row swapiing.
	cout<<"5: Swap matrix rows and display the result" << "\n";
	//Prints output to terminal to prompt the user that choice 6 is for them to input a 1 nxn matrix text file to read and stores the matrix, and swap the columns based on user input, and print out the result matrix of the column swapiing.0
	cout<<"6: Swap matrix columns and display the result" << "\n";
	//Prints output to terminal to prompt the user that choice 7 is for them to input a 1 nxn matrix text file to read and stores the matrix, and updates it by the users row,column, and value input and updates the matrix on that info, and prints out the reuslt matrix of that
	cout<<"7: Update matrix  at row by column with new value and display the result" << "\n";
}

void choice_selection() {
	//Declares integer choice
	int choice;
	//Prints ouput to terminal to prompt the user for a choice input
	cout<<"Choice: ";
	//Stores user input in choice
	cin  >> choice;
	//Declares string matrix numbers text file name
	string matrix_numbers_text_file_name;
	//Declares and initializes matrix1 matrix object witha  grid size of 0 and 0 indicated by those arguments passed in
	Matrix matrix1(0,0);
	//Declares and initializes matrix2 matrix object witha  grid size of 0 and 0 indicated by those arguments passed in
	Matrix matrix2(0,0);
	//Declares and initializes result matrix object witha  grid size of 0 and 0 indicated by those arguments passed in
	Matrix result_matrix(0,0);
	//Declares and initializes matrix matrix object witha  grid size of 0 and 0 indicated by those arguments passed in
	Matrix matrix(0,0);

	//Swtich case statement with choice passed in as argument, to check what choice was made, and what operation to execute
	switch(choice) {
	//If choice case is integer 1, Choice 1 is executed for a given 2 nxn matrix, to print the two matrices
	case 1:
	{
		//Prints ouput to terminal for the user to be prompted the Matrix Numbers Text File name
		cout<<"Enter 2 nxn Matrix Numbers Text File Name: ";
		//Stores the user input into matrix numbers text file name
		cin >> matrix_numbers_text_file_name;
		//matrices pair stores result ouput of the executed function called create matrices with matrix numbers text filename passed in as argument this gives two matrixes
		pair<Matrix,Matrix> matrices = create_matrices(matrix_numbers_text_file_name);
		//Matrix1 is set to the first of the matrices pair
		matrix1 = matrices.first;
		//Matrix2 is set to the second of the matrices pair
		matrix2 = matrices.second;
		//Prints output termianl the printed matrix 1 grid
		cout<< "Matrix 1: \n";
		//Result matrix object executes the print grid function
		matrix1.print_grid();
		//Printed outout to terminal some newline spacing
		cout<< "\n";
		//Prints output termianl the printed matrix 1 grid
		cout<< "Matrix 2: \n";
		//Result matrix object executes the print grid function
		matrix2.print_grid();
		//Break statement to get of switch case statement
		break;
	}
	//If choice case is integer 2, Choice 2 is executed for a given 2 nxn matrix, add the two matrices
	case 2:
	{
		//Prints ouput to terminal for the user to be prompted the Matrix Numbers Text File name
		cout<<"Enter 2 nxn Matrix Numbers Text File Name: ";
		//Stores the user input into matrix numbers text file name
		cin >> matrix_numbers_text_file_name;
		//matrices pair stores result ouput of the executed function called create matrices with matrix numbers text filename passed in as argument this gives two matrixes
		pair<Matrix,Matrix> matrices = create_matrices(matrix_numbers_text_file_name);
		//Matrix1 is set to the first of the matrices pair
		matrix1 = matrices.first;
		//Matrix2 is set to the second of the matrices pair
		matrix2 = matrices.second;
		//Result matrix is a stores result matrix from the ouput of the executed add matrices function with matrix 1 and 2 passed in as argument
		result_matrix = add_matrices(matrix1,matrix2);
		//Prints ouput to terminal the result output
		cout<<"Result: \n";
		//Result matrix object executes the print grid function
		result_matrix.print_grid();
		//Break statement to get of switch case statement
		break;
	}
	//If choice case is integer 3, Choice 3 is executed for a given 2 nxn matrix,  to multiply the two matrices
	case 3:
	{
		//Prints ouput to terminal for the user to be prompted the Matrix Numbers Text File name
		cout<<"Enter 2 nxn Matrix Numbers Text File Name: ";
		//Stores the user input into matrix numbers text file name
		cin >> matrix_numbers_text_file_name;
		//matrices pair stores result ouput of the executed function called create matrices with matrix numbers text filename passed in as argument this gives two matrixes
		pair<Matrix,Matrix> matrices = create_matrices(matrix_numbers_text_file_name);
		//Matrix1 is set to the first of the matrices pair
		matrix1 = matrices.first;
		//Matrix2 is set to the second of the matrices pair
		matrix2 = matrices.second;
		//Result matrix is a stores result matrix from the ouput of the executed multiply matrices function with matrix 1 and 2 passed in as argument
		result_matrix = multiply_matrices(matrix1,matrix2);
		//Prints ouput to terminal the result output
		cout<<"Result: \n";
		//Result matrix object executes the print grid function
		result_matrix.print_grid();
		//Break statement to get of switch case statement
		break;
	}
	//If choice case is integer 4, Choice 4 is executed for a given matrix, to coutned for the sum of its main and secondary diagonal sum, to be printed to the user
	case 4:
	{
		//Prints ouput to terminal for the user to be prompted the Matrix Numbers Text File name
		cout<<"Enter Single nxn Matrix Numbers Text File Name: ";
		//Stores the user input into matrix numbers text file name
		cin >> matrix_numbers_text_file_name;
		//matrix stores result ouput of the executed function called create matrice with matrix numbers text filename passed in as argument
		matrix = create_matrice(matrix_numbers_text_file_name);
		//Sum diagoanl function is executed with matrix input passed in as arugment to count up the main and secodnary sum diagonal
		sum_diagonal(matrix);
		//Break statement to get of switch case statement
		break;
	}
	//If choice case is integer 5, Choice 5 is executed for a given matrix to swap row values, and be printed to terminal
	case 5:
	{
		//Prints ouput to terminal for the user to be prompted the Matrix Numbers Text File name
		cout<<"Enter Single nxn Matrix Numbers Text File Name: ";
		//Stores the user input into matrix numbers text file name
		cin >> matrix_numbers_text_file_name;
		//matrix stores result ouput of the executed function called create matrice with matrix numbers text filename passed in as argument
		matrix = create_matrice(matrix_numbers_text_file_name);
		//Declares integer row1
		int row1;
		//Declares integer row2
		int row2;
		//Prints ouput to terminal to prompt the user for a Row 1 number to Swap

		
		cout<<"Enter Row 1 to Swap";
		//Stores user input in row1
		cin >> row1;
		//Prints ouput to terminal to prompt the user for a Row 2 number to Swap
		cout<<"Enter Row 2 to Swap";
		//Stores user input in row2
		cin >> row2;

		//Checks to see if row1 and row2 is out of bounds
		if(row1-1 < 0 || row1-1 > matrix.get_number_of_rows() || row2-1 < 0 || row2-1 > matrix.get_number_of_rows() ){
			//Prints to terminal that the Row number is out of bounds
			cout<<"Row number is out of bounds"<< "\n";
			//Break out of switch case
			break;
		}
		
		else{
    		//Result matrix stores the updated matrix of result from the executed swap rows function with matrix,row1, and row2 passed in arguments, to swap the row valus
    		result_matrix = swap_rows(matrix,row1-1,row2-1);
    		//Result matrix object executes the print grid function
    		result_matrix.print_grid();
    		//Break statement to get out of switch case statement
    		break;
		}
	}
	//If choice case is integer 6, Choice 6 is executed for a given matrix to swap column values, and be printed to terminal
	case 6:
	{
		//Prints ouput to terminal for the user to be prompted the Matrix Numbers Text File name
		cout<<"Enter Single nxn Matrix Numbers Text File Name: ";
		//Stores the user input into matrix numbers text file name
		cin >> matrix_numbers_text_file_name;
		//matrix stores result ouput of the executed function called create matrice with matrix numbers text filename passed in as argument
		matrix = create_matrice(matrix_numbers_text_file_name);
		//Declares integer column1
		int column1;
		//Declares integer column2
		int column2;
		//Prints ouput to terminal to prompt the user for a Column 1 number to Swap
		cout<<"Enter Column 1 to Swap";
		//Stores user input in column1
		cin >> column1;
		//Prints ouput to terminal to prompt the user for a Column 2 number to Swap
		cout<<"Enter Column 2 to Swap";
		//Stores user input in column2
		cin >> column2;
		//If column1 and column2 are out of bound of the number of columns
		if(column1-1 < 0 || column1-1 > matrix.get_number_of_columns() || column2-1 < 0 || column2-1 > matrix.get_number_of_columns() ){
			//Prints to termianl that the column is out of bounds
			cout<<"Column number is out of bounds"<<"\n";
			//Breaks out of switch statement
			break;
		}
		else{
			//Result matrix stores the updated matrix of result from the executed swap columns function with matrix,column1, and column2 passed in arguments, to swap the column valus
			result_matrix = swap_columns(matrix,column1-1,column2-1);
			//Result matrix object executes the print grid function
			result_matrix.print_grid();
			//Break statement to get out of switch case statement
			break;
		}
	}
	//If choice case is integer 7, Choice 7 is executed for a given matrix to be given a updated value at the row by column location
	case 7:
	{
		//Prints ouput to terminal for the user to be prompted the Matrix Numbers Text File name
		cout<<"Enter Single nxn Matrix Numbers Text File Name: ";
		//Stores the user input into matrix numbers text file name
		cin >> matrix_numbers_text_file_name;
		//matrix stores result ouput of the executed function called create matrice with matrix numbers text filename passed in as argument
		matrix = create_matrice(matrix_numbers_text_file_name);
		//Declares integer column
		int column1;
		//Declares integer row
		int row1;
		//Declares integer value
		int value;
		//Prints ouput to terminal to prompt the user for a row number
		cout<<"Enter Row Number: ";
		//Stores user input into row
		cin>>row1;
		//Prints ouput to terminal to prompt the user for a column number
		cout<<"Enter Column Number: ";
		//Stores user input into column
		cin>>column1;
		//Prints ouput to terminal to prompt the user for a value to be stored in the matrix at location row by column
		cout<<"Enter Value to be stores: ";
		//Stores the user input into value
		cin>>value;

		//Checks to see if the column is out of bounds
		if(column1-1 < 0 || column1-1 > matrix.get_number_of_columns() ){
			//Prints to the terminal that the column number is out of bounds
			cout<<"Column number is out of bounds" << "\n";
			//Breaks out of swicth statement
			break;
		}
		//Checks to see if the row is out of bounds
		if(row1-1 < 0 || row1-1 > matrix.get_number_of_rows() ){
			//Prints to the terminal that the column number is out of bounds
			cout<<"Row number is out of bounds" << "\n";
			//Breaks out of swicth statement
			break;
		}
		else{
			//Result matrix stores the updated matrix result from the update matrix function with matrix,row,column, and value input. The matrix is updated with the value stored in the grid at row by cloumn location
			result_matrix = update_matrix(matrix,row1-1,column1-1,value);
			//Result matrix object executes the print grid function
			result_matrix.print_grid();
			//Break statement to get out of switch case statement
			break;
		}
	}
	//In case if all cases fail, default case is executed
	default:
	{
		//Prints output to terminal that there choice is invalid
		cout<<"Invalid Choice" << "\n";
	}

	
}


int main(){
    cout<<"Hello! Welcome to the Matrix Function and Operations Program!"<<"\n";
    print_menu();
    cout<<"\n";
    choice_selection();
    cout<<"Program Has Ended! Goodbye!"<<"\n";
    return 0;

}